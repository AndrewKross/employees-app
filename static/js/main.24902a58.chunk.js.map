{"version":3,"sources":["const.ts","reducer.ts","components/controls/controls.tsx","components/employees-list/employees-list.tsx","components/main-page/main-page.tsx","components/employee-page/employee-page.tsx","components/app/App.tsx","index.tsx"],"names":["SortType","FilterType","AppRoute","dateFormat","initialState","employeesData","sortType","filterType","isArchiveFilter","ActionType","ActionCreator","data","type","payload","isChecked","Option","Select","withRouter","connect","dispatch","changeSortType","console","log","changeFilterType","changeIsArchiveFilter","history","className","Group","onChange","evt","target","value","defaultValue","valueOf","toString","htmlFor","id","checked","onClick","push","state","filteredEmployeeData","filter","it","role","isArchive","sort","a","b","name","dateA","birthday","split","reverse","join","dateB","Date","parse","columns","title","dataIndex","key","dataSource","style","cursor","tableLayout","rowKey","record","onRow","MainPage","saveEmployee","employeeId","newEmployee","length","phone","selectedEmployee","find","useState","employeeData","setEmployeeData","onSubmit","preventDefault","newEmployeesData","findIndex","required","maxLength","placeholder","mask","pattern","moment","format","htmlType","danger","error","to","App","exact","path","component","render","match","params","Fragment","store","createStore","action","composeWithDevTools","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24902a58.chunk.js","sourcesContent":["export const SortType = {\r\n  NAME: `name`,\r\n  BIRTHDAY: `birthday`,\r\n}\r\n\r\nexport const FilterType = {\r\n  NONE: `none`,\r\n  COOK: `cook`,\r\n  DRIVER: `driver`,\r\n  WAITER: `waiter`,\r\n}\r\n\r\nexport const AppRoute = {\r\n  MAIN: `/`,\r\n  EMPLOYEE_PAGE: `/employee/`,\r\n}\r\n\r\nexport const dateFormat = `DD.MM.YYYY`\r\n","import { EmployeeData } from \"./types\";\r\nimport { FilterType, SortType } from \"./const\";\r\n\r\ntype Action = {\r\n  type: string\r\n  payload?: any\r\n}\r\n\r\nconst initialState = {\r\n  employeesData: [],\r\n  sortType: SortType.NAME,\r\n  filterType: FilterType.NONE,\r\n  isArchiveFilter: false,\r\n}\r\n\r\nconst ActionType = {\r\n  LOAD_EMPLOYEES: `LOAD_EMPLOYEES`,\r\n  CHANGE_SORT_TYPE: `CHANGE_SORT_TYPE`,\r\n  CHANGE_FILTER_TYPE: `CHANGE_FILTER_TYPE`,\r\n  CHANGE_IS_ARCHIVE_FILTER: `CHANGE_IS_ARCHIVE_FILTER`,\r\n}\r\n\r\nconst ActionCreator = {\r\n  loadEmployees: (data: EmployeeData[]) => ({\r\n    type: ActionType.LOAD_EMPLOYEES,\r\n    payload: data,\r\n  }),\r\n  changeSortType: (type: string) => ({\r\n    type: ActionType.CHANGE_SORT_TYPE,\r\n    payload: type,\r\n  }),\r\n  changeFilterType: (type: string) => ({\r\n    type: ActionType.CHANGE_FILTER_TYPE,\r\n    payload: type,\r\n  }),\r\n  changeIsArchiveFilter: (isChecked: boolean) => ({\r\n    type: ActionType.CHANGE_IS_ARCHIVE_FILTER,\r\n    payload: isChecked,\r\n  }),\r\n}\r\n\r\nconst reducer = (state = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.LOAD_EMPLOYEES:\r\n      return {\r\n        ...state,\r\n        employeesData: action.payload,\r\n      }\r\n    case ActionType.CHANGE_SORT_TYPE:\r\n      return {\r\n        ...state,\r\n        sortType: action.payload\r\n      }\r\n    case ActionType.CHANGE_FILTER_TYPE:\r\n      return {\r\n        ...state,\r\n        filterType: action.payload\r\n      }\r\n    case ActionType.CHANGE_IS_ARCHIVE_FILTER:\r\n      return {\r\n        ...state,\r\n        isArchiveFilter: action.payload,\r\n      }\r\n    default:\r\n      return { ...state }\r\n  }\r\n}\r\n\r\nexport { reducer, ActionCreator }\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { AppRoute, FilterType, SortType } from \"../../const\";\r\nimport { ActionCreator } from \"../../reducer\";\r\nimport { Button, Checkbox, Radio, Select } from \"antd\";\r\nimport \"./controls.scss\"\r\n\r\nconst {Option} = Select\r\n\r\ntype Props = {\r\n  changeSortType: (sortType: string) => void\r\n  changeFilterType: (filterType: string) => void\r\n  changeIsArchiveFilter: (isChecked: boolean) => void\r\n  history: any\r\n}\r\n\r\nconst Controls = ({ changeSortType, changeFilterType, changeIsArchiveFilter, history }: Props) => {\r\n  return (\r\n    <section className=\"controls\">\r\n      <div className=\"controls__sorting\">\r\n        <p className=\"controls__sorting__label\">Сортировать по:</p>\r\n        <Radio.Group onChange={(evt) => changeSortType(evt.target.value)} defaultValue={SortType.NAME}>\r\n          <Radio value={SortType.NAME}>Имени</Radio>\r\n          <Radio value={SortType.BIRTHDAY}>Дате рождения</Radio>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"controls__filters\">\r\n        <p>Фильтры: </p>\r\n        <Select className=\"role-filter\" defaultValue={FilterType.NONE}\r\n                onChange={(evt) => changeFilterType(evt.valueOf().toString())}>\r\n          <Option value={FilterType.NONE}>Все</Option>\r\n          <Option value={FilterType.COOK}>Повар</Option>\r\n          <Option value={FilterType.WAITER}>Официант</Option>\r\n          <Option value={FilterType.DRIVER}>Водитель</Option>\r\n        </Select>\r\n        <label htmlFor=\"archiveFilter\">В архиве: </label>\r\n        <Checkbox type=\"checkbox\" id=\"archiveFilter\" onChange={\r\n          (evt) => changeIsArchiveFilter(evt.target.checked)\r\n        }/>\r\n      </div>\r\n      <Button className=\"add-new-btn\"\r\n              onClick={() => {\r\n                history.push(`${AppRoute.EMPLOYEE_PAGE}new`)\r\n                console.log(`Выполнен переход на страницу создания новой карточки сотрудника`)\r\n              }}>\r\n        Добавить нового сотрудника\r\n      </Button>\r\n    </section>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  changeSortType(sortType: string) {\r\n    dispatch(ActionCreator.changeSortType(sortType))\r\n    console.log(`Выбрана сортировка по ${sortType}`)\r\n  },\r\n  changeFilterType(filterType: string) {\r\n    dispatch(ActionCreator.changeFilterType(filterType))\r\n    console.log(`Выбрана фильтрация по ${filterType}`)\r\n  },\r\n  changeIsArchiveFilter(isChecked: boolean) {\r\n    dispatch(ActionCreator.changeIsArchiveFilter(isChecked))\r\n    console.log(`Фильтрация \"в архиве\" изменена на ${isChecked}`)\r\n  },\r\n})\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Controls))\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { EmployeeData, State } from \"../../types\";\r\nimport { AppRoute, FilterType, SortType } from \"../../const\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Table } from 'antd';\r\n\r\ntype Props = {\r\n  employeesData: EmployeeData[]\r\n  sortType: string\r\n  filterType: string\r\n  isArchiveFilter: boolean\r\n  history: any\r\n}\r\n\r\nconst EmployeesList = ({ employeesData, sortType, filterType, isArchiveFilter, history }: Props) => {\r\n  let filteredEmployeeData = [...employeesData]\r\n\r\n  if (filterType !== FilterType.NONE) {\r\n    filteredEmployeeData = filteredEmployeeData.filter((it) => {\r\n      switch (filterType) {\r\n        case FilterType.DRIVER:\r\n          return it.role === FilterType.DRIVER\r\n        case FilterType.WAITER:\r\n          return it.role === FilterType.WAITER\r\n        case FilterType.COOK:\r\n          return it.role === FilterType.COOK\r\n        default:\r\n          return true\r\n      }\r\n    })\r\n  }\r\n\r\n  if (isArchiveFilter) {\r\n    filteredEmployeeData = filteredEmployeeData.filter((it) => it.isArchive)\r\n  }\r\n\r\n  filteredEmployeeData.sort((a, b) => {\r\n    switch (sortType) {\r\n      case SortType.NAME:\r\n        return a.name > b.name ? 1 : -1\r\n      case SortType.BIRTHDAY:\r\n        const dateA = a.birthday.split(`.`).reverse().join(`.`)\r\n        const dateB = b.birthday.split(`.`).reverse().join(`.`)\r\n        return Date.parse(dateA) > Date.parse(dateB) ? 1 : -1\r\n      default:\r\n        return a.name > b.name ? 1 : -1\r\n    }\r\n  })\r\n\r\n  const columns = [\r\n    {\r\n      title: `Имя`,\r\n      dataIndex: `name`,\r\n      key: `name`,\r\n    }, {\r\n      title: `Должность`,\r\n      dataIndex: `role`,\r\n      key: `role`,\r\n    }, {\r\n      title: `Телефон`,\r\n      dataIndex: `phone`,\r\n      key: `phone`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <section className=\"employees-section\">\r\n      <Table columns={columns} dataSource={filteredEmployeeData} style={{cursor: `pointer`}} tableLayout=\"fixed\"\r\n             rowKey={(record) => record.id} onRow={(record) => {\r\n              return {\r\n                onClick: () => {history.push(`${AppRoute.EMPLOYEE_PAGE + record.id}`)},\r\n              };\r\n      }} />\r\n    </section>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  employeesData: state.employeesData,\r\n  sortType: state.sortType,\r\n  filterType: state.filterType,\r\n  isArchiveFilter: state.isArchiveFilter,\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps)(EmployeesList))\r\n","import React from \"react\";\r\nimport Controls from \"../controls/controls\";\r\nimport EmployeesList from \"../employees-list/employees-list\";\r\nimport \"./main-page.scss\"\r\n\r\nconst MainPage = () => (\r\n  <>\r\n    <header>\r\n      <h1 className=\"app-header\">Employees App</h1>\r\n    </header>\r\n    <main>\r\n      <Controls/>\r\n      <EmployeesList/>\r\n    </main>\r\n  </>\r\n)\r\n\r\nexport default MainPage\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport MaskedInput from 'antd-mask-input'\r\nimport moment from \"moment\";\r\nimport {Input, Select, Checkbox, Button, DatePicker} from 'antd';\r\nimport { EmployeeData, State } from \"../../types\";\r\nimport { AppRoute, dateFormat, FilterType } from \"../../const\";\r\nimport { ActionCreator } from \"../../reducer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./employee-page.scss\"\r\n\r\nconst { Option } = Select\r\n\r\ntype Props = {\r\n  employeeId: string\r\n  employeesData: EmployeeData[]\r\n  saveEmployee: (data: EmployeeData[]) => void\r\n  history: any\r\n}\r\n\r\nconst EmployeePage = ({ employeeId, employeesData, saveEmployee, history }: Props) => {\r\n  const newEmployee = {\r\n    id: employeesData[employeesData.length - 1].id + 1,\r\n    name: ``,\r\n    phone: `Phone`,\r\n    birthday: `01.01.2000`,\r\n    role: `driver`,\r\n    isArchive: false,\r\n  }\r\n\r\n  const formSubmitHandler = (evt: any) => {\r\n    evt.preventDefault()\r\n    const newEmployeesData = [...employeesData]\r\n\r\n    if (employeeId !== `new`) {\r\n      const employeeIndex = employeesData.findIndex((it) => it.id === +employeeId)\r\n      newEmployeesData[employeeIndex] = employeeData\r\n    } else {\r\n      newEmployeesData.push(employeeData)\r\n    }\r\n\r\n    saveEmployee(newEmployeesData)\r\n    employeeId !== `new` ? console.log(`Сотрудник с id ${employeeId} успешно сохранен!`)\r\n      : console.log(`Новый сотрудник успешно сохранен в базу! Ему присвоен id ${newEmployee.id}`)\r\n    history.push(AppRoute.MAIN)\r\n  }\r\n\r\n  let selectedEmployee = newEmployee\r\n\r\n  if (employeeId !== `new`) {\r\n    selectedEmployee = employeesData.find((data) => data.id === +employeeId)!\r\n  }\r\n\r\n  const [employeeData, setEmployeeData] = useState(selectedEmployee)\r\n\r\n  return selectedEmployee ? (\r\n    <>\r\n      <header>\r\n        <h1 className=\"employee-card-header\">Карточка сотрудника</h1>\r\n      </header>\r\n      <section className=\"employee-page\">\r\n        <form className=\"employee-form\" onSubmit={formSubmitHandler}>\r\n          <div className=\"name-input-wrapper employee-form__wrapper\">\r\n            <label className=\"name-input-label\" htmlFor=\"employee-name-input\">Имя: </label>\r\n            <Input className=\"name-input\" type=\"text\" id=\"employee-name-input\" value={employeeData.name} required\r\n                   maxLength={30} placeholder=\"Введите имя сотрудника\"\r\n                   onChange={(evt) => setEmployeeData({\r\n                     ...employeeData,\r\n                     name: evt.target.value\r\n                   })}/>\r\n          </div>\r\n          <div className=\"phone-input-wrapper employee-form__wrapper\">\r\n            <label className=\"phone-input-label\" htmlFor=\"employee-phone-input\">Телефон: </label>\r\n            <MaskedInput type=\"tel\" id=\"employee-phone-input\" value={employeeData.phone} required\r\n                         mask=\"+7 (111) 111-1111\" pattern=\"^\\+?\\d\\s(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$\"\r\n                         onChange={(evt) => setEmployeeData({\r\n                           ...employeeData,\r\n                           phone: evt.target.value\r\n                         })}/>\r\n          </div>\r\n          <div className=\"birthday-input-wrapper employee-form__wrapper\">\r\n            <label htmlFor=\"employee-birthday-input\">Дата рождения: </label>\r\n            <DatePicker id=\"employee-birthday-input\" defaultValue={moment(employeeData.birthday, dateFormat)}\r\n                        format={dateFormat} onChange={(evt) => {\r\n                           setEmployeeData({\r\n                             ...employeeData,\r\n                             birthday: moment(evt).format(dateFormat) })\r\n                         }}/>\r\n          </div>\r\n          <div className=\"role-input-wrapper employee-form__wrapper\">\r\n            <label>Должность: </label>\r\n            <Select className=\"role-input\" value={employeeData.role}\r\n                    onChange={(evt) => setEmployeeData({ ...employeeData, role: evt.valueOf() })}>\r\n              <Option value={FilterType.COOK}>Повар</Option>\r\n              <Option value={FilterType.WAITER}>Официант</Option>\r\n              <Option value={FilterType.DRIVER}>Водитель</Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"archive-input-wrapper employee-form__wrapper\">\r\n            <label htmlFor=\"employee-archive-checkbox\">В архиве? </label>\r\n            <Checkbox id=\"employee-archive-checkbox\" checked={employeeData.isArchive}\r\n                   onChange={(evt) => setEmployeeData({\r\n                     ...employeeData,\r\n                     isArchive: evt.target.checked\r\n                   })}/>\r\n          </div>\r\n          <Button className=\"employee-form__submit-btn\" type=\"primary\" htmlType=\"submit\">Сохранить</Button>\r\n          <Button className=\"employee-form__back-btn\" type=\"primary\" danger\r\n                  onClick={() => history.push(AppRoute.MAIN)}>Вернуться назад без сохранения</Button>\r\n        </form>\r\n      </section>\r\n    </>\r\n  ) : (\r\n    <div>\r\n      {console.error(`Выполнен переход на страницу несуществующего сотрудника (такого id нет в базе)`)}\r\n      <h1>Ошибка! Такого сотрудника нет в базе.</h1>\r\n      <Link to={AppRoute.MAIN}>Вернуться на главную</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  employeesData: state.employeesData\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  saveEmployee(data: EmployeeData[]) {\r\n    dispatch(ActionCreator.loadEmployees(data))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeePage)\r\n","import React from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom'\nimport { AppRoute } from '../../const'\nimport 'antd/dist/antd.css';\nimport MainPage from \"../main-page/main-page\";\nimport EmployeePage from \"../employee-page/employee-page\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path={AppRoute.MAIN} component={MainPage}/>\n        <Route exact path={`${AppRoute.EMPLOYEE_PAGE}:id`}\n               render={({ match, history }) => {\n                 console.log(`Выполнен переход на страницу редактирования сотрудника с id ${match.params.id}`)\n                 return <EmployeePage employeeId={match.params.id} history={history}/>\n               }}/>\n        <Route render={() => (\n          <React.Fragment>\n            {console.error(`Выполнен переход на несуществующий маршрут`)}\n            <h1>Ошибка: 404. Страница не найдена.</h1>\n            <Link to={AppRoute.MAIN}>Вернуться на главную</Link>\n          </React.Fragment>\n        )}\n        />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from 'react-redux';\nimport { ActionCreator, reducer } from './reducer';\nimport employeesData from './employees.json';\nimport './index.scss';\nimport App from './components/app/App';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n\nstore.dispatch(ActionCreator.loadEmployees(employeesData))\nconsole.log(`Данные загружены в базу`)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nconsole.log(`Приложение запущено`)\n"],"sourceRoot":""}