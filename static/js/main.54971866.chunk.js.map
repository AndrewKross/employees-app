{"version":3,"sources":["const.ts","reducer.ts","components/employees-list/employees-list.tsx","components/controls/controls.tsx","components/app/App.tsx","index.tsx"],"names":["SortType","FilterType","initialState","employeesData","sortType","filterType","isArchiveFilter","ActionType","ActionCreator","data","type","payload","isChecked","connect","state","filteredEmployeesData","filter","it","role","isArchive","sort","a","b","name","dateA","birthday","split","reverse","join","dateB","Date","parse","className","map","phone","id","dispatch","changeSortType","changeFilterType","changeIsArchiveFilter","defaultChecked","onChange","htmlFor","evt","target","value","checked","App","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54971866.chunk.js","sourcesContent":["export const SortType = {\r\n   NAME: `name`,\r\n   BIRTHDAY: `birthday`,\r\n}\r\n\r\nexport const FilterType = {\r\n   NONE: `none`,\r\n   COOK: `cook`,\r\n   DRIVER: `driver`,\r\n   WAITER: `waiter`,\r\n}\r\n","import {EmployeesData} from \"./types\";\r\nimport {SortType, FilterType} from \"./const\";\r\n\r\nconst initialState = {\r\n   employeesData: [],\r\n   sortType: SortType.NAME,\r\n   filterType: FilterType.NONE,\r\n   isArchiveFilter: false,\r\n}\r\n\r\nconst ActionType = {\r\n   LOAD_EMPLOYEES: `LOAD_EMPLOYEES`,\r\n   CHANGE_SORT_TYPE: `CHANGE_SORT_TYPE`,\r\n   CHANGE_FILTER_TYPE: `CHANGE_FILTER_TYPE`,\r\n   CHANGE_IS_ARCHIVE_FILTER: `CHANGE_IS_ARCHIVE_FILTER`,\r\n}\r\n\r\nconst ActionCreator = {\r\n   loadEmployees: (data: EmployeesData[]) => ({\r\n      type: ActionType.LOAD_EMPLOYEES,\r\n      payload: data,\r\n   }),\r\n   changeSortType: (type: string) => ({\r\n      type: ActionType.CHANGE_SORT_TYPE,\r\n      payload: type,\r\n   }),\r\n   changeFilterType: (type: string) => ({\r\n      type: ActionType.CHANGE_FILTER_TYPE,\r\n      payload: type,\r\n   }),\r\n   changeIsArchiveFilter: (isChecked: boolean) => ({\r\n      type: ActionType.CHANGE_IS_ARCHIVE_FILTER,\r\n      payload: isChecked,\r\n   }),\r\n}\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n   switch (action.type) {\r\n      case ActionType.LOAD_EMPLOYEES:\r\n         return {\r\n            ...state,\r\n            employeesData: action.payload,\r\n         }\r\n      case ActionType.CHANGE_SORT_TYPE:\r\n         return {\r\n            ...state,\r\n            sortType: action.payload\r\n         }\r\n      case ActionType.CHANGE_FILTER_TYPE:\r\n         return {\r\n            ...state,\r\n            filterType: action.payload\r\n         }\r\n      case ActionType.CHANGE_IS_ARCHIVE_FILTER:\r\n         return {\r\n            ...state,\r\n            isArchiveFilter: action.payload,\r\n         }\r\n      default:\r\n         return {...state}\r\n   }\r\n}\r\n\r\nexport {reducer, ActionCreator}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {EmployeesData, State} from \"../../types\";\r\nimport {FilterType, SortType} from \"../../const\";\r\n\r\ntype Props = {\r\n  employeesData: EmployeesData[]\r\n  sortType: string\r\n  filterType: string\r\n  isArchiveFilter: boolean\r\n}\r\n\r\nconst EmployeesList = ({employeesData, sortType, filterType, isArchiveFilter}: Props) => {\r\n  let filteredEmployeesData = [...employeesData]\r\n\r\n  if (filterType !== FilterType.NONE) {\r\n    filteredEmployeesData = filteredEmployeesData.filter((it) => {\r\n      switch (filterType) {\r\n        case FilterType.DRIVER:\r\n          return it.role === FilterType.DRIVER\r\n        case FilterType.WAITER:\r\n          return it.role === FilterType.WAITER\r\n        case FilterType.COOK:\r\n          return it.role === FilterType.COOK\r\n        default:\r\n          return true\r\n      }\r\n    })\r\n  }\r\n\r\n  if (isArchiveFilter) {\r\n    filteredEmployeesData = filteredEmployeesData.filter((it) => it.isArchive)\r\n  }\r\n\r\n  filteredEmployeesData.sort((a, b) => {\r\n    switch (sortType) {\r\n      case SortType.NAME:\r\n        return a.name > b.name ? 1 : -1\r\n      case SortType.BIRTHDAY:\r\n        const dateA = a.birthday.split(`.`).reverse().join(`.`)\r\n        const dateB = b.birthday.split(`.`).reverse().join(`.`)\r\n        return Date.parse(dateA) > Date.parse(dateB) ? 1 : -1\r\n      default:\r\n        return a.name > b.name ? 1 : -1\r\n    }\r\n  })\r\n\r\n  return (\r\n    <section className=\"employees-section\">\r\n        <table className=\"employees\">\r\n          <thead>\r\n            <tr>\r\n              <td>Имя</td>\r\n              <td>Должность</td>\r\n              <td>Телефон</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {filteredEmployeesData.map((it) => (\r\n             <tr className=\"employees__field\" key={it.id}>\r\n               <td className=\"employees__name\">{it.name}</td>\r\n               <td className=\"employees__role\">{it.role}</td>\r\n               <td className=\"employees__phone\">{it.phone}</td>\r\n             </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  employeesData: state.employeesData,\r\n  sortType: state.sortType,\r\n  filterType: state.filterType,\r\n  isArchiveFilter: state.isArchiveFilter,\r\n})\r\n\r\nexport default connect(mapStateToProps)(EmployeesList)\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport {FilterType, SortType} from \"../../const\";\r\nimport {State} from \"../../types\";\r\nimport {ActionCreator} from \"../../reducer\";\r\n\r\ntype Props = {\r\n   sortType: string\r\n   filterType: string\r\n   changeSortType: (sortType: string) => void\r\n   changeFilterType: (filterType: string) => void\r\n   changeIsArchiveFilter: (isChecked: boolean) => void\r\n}\r\n\r\nconst Controls = ({sortType, filterType, changeSortType, changeFilterType, changeIsArchiveFilter}: Props) => {\r\n   return (\r\n      <section className=\"controls\">\r\n         <h2>Controls</h2>\r\n         <div className=\"controls__sorting\">\r\n            <p>Сортировать по:</p>\r\n            <input type=\"radio\" name=\"sortInput\" id=\"sortInput-1\" defaultChecked onChange={\r\n               () => changeSortType(SortType.NAME)\r\n            }/>\r\n            <label htmlFor=\"sortInput-1\">Имени</label>\r\n            <input type=\"radio\" name=\"sortInput\" id=\"sortInput-2\" onChange={() => changeSortType(SortType.BIRTHDAY)}/>\r\n            <label htmlFor=\"sortInput-2\">Дате рождения</label>\r\n         </div>\r\n         <div className=\"controls__filters\">\r\n            <p>Фильтровать по:</p>\r\n            <p>Должности</p>\r\n            <select onChange={(evt) => changeFilterType(evt.target.value)}>\r\n               <option value={FilterType.NONE}>Все</option>\r\n               <option value={FilterType.COOK}>Повар</option>\r\n               <option value={FilterType.WAITER}>Официант</option>\r\n               <option value={FilterType.DRIVER}>Водитель</option>\r\n            </select>\r\n            <input type=\"checkbox\" id=\"archiveFilter\" onChange={\r\n               (evt) => changeIsArchiveFilter(evt.target.checked)\r\n            }/>\r\n            <label htmlFor=\"archiveFilter\">В архиве</label>\r\n         </div>\r\n      </section>\r\n   )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n   sortType: state.sortType,\r\n   filterType: state.filterType,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n   changeSortType(sortType: string) {\r\n      dispatch(ActionCreator.changeSortType(sortType))\r\n   },\r\n   changeFilterType(filterType: string) {\r\n      dispatch(ActionCreator.changeFilterType(filterType))\r\n   },\r\n   changeIsArchiveFilter(isChecked: boolean) {\r\n      dispatch(ActionCreator.changeIsArchiveFilter(isChecked))\r\n   },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls)\r\n","import React from 'react';\nimport EmployeesList from '../employees-list/employees-list';\nimport Controls from '../controls/controls'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <>\n    <header>\n      <h1>Employees App</h1>\n    </header>\n    <main>\n      <Controls />\n      <EmployeesList />\n    </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {Provider} from 'react-redux';\nimport {reducer, ActionCreator} from './reducer';\nimport employeesData from './employees.json';\nimport './index.css';\nimport App from './components/app/App';\n\nconst store = createStore(\n   reducer,\n   composeWithDevTools(),\n);\n\nstore.dispatch(ActionCreator.loadEmployees(employeesData))\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}