{"version":3,"sources":["const.ts","reducer/reducer.ts","reducer/selectors.ts","utils.ts","components/controls/controls.tsx","components/employees-list/employees-list.tsx","components/main-page/main-page.tsx","components/employee-page/employee-page.tsx","components/app/App.tsx","index.tsx"],"names":["SortType","FilterType","AppRoute","initialState","employeesData","sortType","filterType","isArchiveFilter","ActionType","ActionCreator","data","type","payload","isChecked","employeeData","getEmployeesData","state","getFilterType","getSortType","getIsArchiveFilter","getFilteredEmployeesData","createSelector","filter","isArchive","filteredEmployeesData","it","role","filterEmployeesData","getSortedEmployeesData","sort","a","b","name","dateA","birthday","split","reverse","join","dateB","Date","parse","sortEmployeesData","Option","Select","withRouter","connect","dispatch","changeSortType","console","log","changeFilterType","changeIsArchiveFilter","history","className","Group","onChange","evt","target","value","defaultValue","valueOf","toString","htmlFor","id","defaultChecked","checked","onClick","push","columns","title","dataIndex","key","dataSource","style","cursor","tableLayout","rowKey","record","onRow","MainPage","editEmployee","addNewEmployee","employeeId","newEmployee","length","phone","selectedEmployee","employeeInBase","find","useState","setEmployeeData","EmployeeHandlers","nameChangeHandler","phoneChangeHandler","birthdayChangeHandler","roleChangeHandler","isArchiveChangeHandler","onSubmit","preventDefault","required","maxLength","placeholder","mask","pattern","htmlType","danger","error","to","App","exact","path","component","render","match","params","Fragment","store","createStore","action","index","findIndex","dataWithEditedEmployee","dataWithNewEmployee","composeWithDevTools","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e88d808d.chunk.js","sourcesContent":["export const SortType = {\r\n  NAME: 'name',\r\n  BIRTHDAY: 'birthday',\r\n}\r\n\r\nexport const FilterType = {\r\n  NONE: 'none',\r\n  COOK: 'cook',\r\n  DRIVER: 'driver',\r\n  WAITER: 'waiter',\r\n}\r\n\r\nexport const AppRoute = {\r\n  MAIN: '/',\r\n  EMPLOYEE_PAGE: '/employee/',\r\n}\r\n\r\nexport const dateFormat = 'DD.MM.YYYY'\r\n","import { ActionTypes, EmployeeData, State } from \"../types\";\r\nimport { FilterType, SortType } from \"../const\";\r\n\r\nconst initialState = {\r\n  employeesData: [],\r\n  sortType: SortType.NAME,\r\n  filterType: FilterType.NONE,\r\n  isArchiveFilter: false,\r\n}\r\n\r\nconst ActionType = {\r\n  LOAD_EMPLOYEES: 'LOAD_EMPLOYEES',\r\n  CHANGE_SORT_TYPE: 'CHANGE_SORT_TYPE',\r\n  CHANGE_FILTER_TYPE: 'CHANGE_FILTER_TYPE',\r\n  CHANGE_IS_ARCHIVE_FILTER: 'CHANGE_IS_ARCHIVE_FILTER',\r\n  EDIT_EMPLOYEE: 'EDIT_EMPLOYEE',\r\n  ADD_NEW_EMPLOYEE: 'ADD_NEW_EMPLOYEE',\r\n}\r\n\r\nconst ActionCreator = {\r\n  loadEmployees: (data: EmployeeData[]): ActionTypes => ({\r\n    type: ActionType.LOAD_EMPLOYEES,\r\n    payload: data,\r\n  }),\r\n  changeSortType: (type: string): ActionTypes => ({\r\n    type: ActionType.CHANGE_SORT_TYPE,\r\n    payload: type,\r\n  }),\r\n  changeFilterType: (type: string): ActionTypes => ({\r\n    type: ActionType.CHANGE_FILTER_TYPE,\r\n    payload: type,\r\n  }),\r\n  changeIsArchiveFilter: (isChecked: boolean): ActionTypes => ({\r\n    type: ActionType.CHANGE_IS_ARCHIVE_FILTER,\r\n    payload: isChecked,\r\n  }),\r\n  editEmployee: (employeeData: EmployeeData): ActionTypes => ({\r\n    type: ActionType.EDIT_EMPLOYEE,\r\n    payload: employeeData,\r\n  }),\r\n  addNewEmployee: (employeeData: EmployeeData): ActionTypes => ({\r\n    type: ActionType.ADD_NEW_EMPLOYEE,\r\n    payload: employeeData,\r\n  })\r\n}\r\n\r\nconst reducer = (state: State = initialState, action: ActionTypes): State => {\r\n  switch (action.type) {\r\n    case ActionType.LOAD_EMPLOYEES:\r\n      return {\r\n        ...state,\r\n        employeesData: action.payload,\r\n      } as State\r\n    case ActionType.CHANGE_SORT_TYPE:\r\n      return {\r\n        ...state,\r\n        sortType: action.payload\r\n      } as State\r\n    case ActionType.CHANGE_FILTER_TYPE:\r\n      return {\r\n        ...state,\r\n        filterType: action.payload\r\n      } as State\r\n    case ActionType.CHANGE_IS_ARCHIVE_FILTER:\r\n      return {\r\n        ...state,\r\n        isArchiveFilter: action.payload,\r\n      } as State\r\n    case ActionType.EDIT_EMPLOYEE:\r\n      const { id } = action.payload as EmployeeData;\r\n      const index = state.employeesData.findIndex((it) => it.id === id)\r\n      const dataWithEditedEmployee = [...state.employeesData]\r\n      dataWithEditedEmployee[index] = action.payload as EmployeeData\r\n      return {\r\n        ...state,\r\n        employeesData: dataWithEditedEmployee,\r\n      } as State\r\n    case ActionType.ADD_NEW_EMPLOYEE:\r\n      const dataWithNewEmployee = [...state.employeesData]\r\n      dataWithNewEmployee.push(action.payload as EmployeeData)\r\n      return {\r\n        ...state,\r\n        employeesData: dataWithNewEmployee,\r\n      }\r\n    default:\r\n      return { ...state }\r\n  }\r\n}\r\n\r\nexport { reducer, ActionCreator, ActionType }\r\n","import { createSelector } from 'reselect';\r\nimport { filterEmployeesData, sortEmployeesData } from '../utils';\r\nimport { State } from \"../types\";\r\n\r\nexport const getEmployeesData = (state: State) => state.employeesData\r\nexport const getFilterType = (state: State) => state.filterType\r\nexport const getSortType = (state: State) => state.sortType\r\nexport const getIsArchiveFilter = (state: State) => state.isArchiveFilter\r\n\r\nexport const getFilteredEmployeesData = createSelector(\r\n  getEmployeesData,\r\n  getFilterType,\r\n  getIsArchiveFilter,\r\n  (data, filter, isArchive) => {\r\n    return filterEmployeesData(data, filter, isArchive)\r\n  },\r\n)\r\n\r\nexport const getSortedEmployeesData = createSelector(\r\n  getFilteredEmployeesData,\r\n  getSortType,\r\n  (data, sortType) => {\r\n    return sortEmployeesData(data, sortType)\r\n  },\r\n)\r\n","import { FilterType, SortType } from \"./const\";\r\nimport { EmployeeData, FilterTypes, SortTypes } from \"./types\";\r\n\r\nexport const filterEmployeesData = (\r\n  employeesData: EmployeeData[], filterType: FilterTypes, isArchiveFilter: boolean\r\n) => {\r\n  const filteredEmployeesData = filterType === FilterType.NONE ? employeesData\r\n    : employeesData.filter((it) => it.role === filterType)\r\n\r\n  return isArchiveFilter ? filteredEmployeesData.filter((it) => it.isArchive)\r\n    : filteredEmployeesData\r\n}\r\n\r\nexport const sortEmployeesData = (employeesData: EmployeeData[], sortType: SortTypes) => {\r\n  return [...employeesData].sort((a, b) => {\r\n    switch (sortType) {\r\n      case SortType.NAME:\r\n        return a.name > b.name ? 1 : -1\r\n      case SortType.BIRTHDAY:\r\n        const dateA = a.birthday.split('.').reverse().join('.')\r\n        const dateB = b.birthday.split('.').reverse().join('.')\r\n        return Date.parse(dateA) > Date.parse(dateB) ? 1 : -1\r\n      default:\r\n        return a.name > b.name ? 1 : -1\r\n    }\r\n  })\r\n}\r\n\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { AppRoute, FilterType, SortType } from \"../../const\";\r\nimport { ActionCreator } from \"../../reducer/reducer\";\r\nimport { Button, Checkbox, Radio, Select } from \"antd\";\r\nimport \"./controls.scss\"\r\nimport { State } from \"../../types\";\r\nimport { getFilterType, getIsArchiveFilter, getSortType } from \"../../reducer/selectors\";\r\n\r\nconst { Option } = Select\r\n\r\ntype Props = {\r\n  changeSortType: (sortType: string) => void\r\n  changeFilterType: (filterType: string) => void\r\n  changeIsArchiveFilter: (isChecked: boolean) => void\r\n  history: any\r\n  filterType: string\r\n  sortType: string\r\n  isArchiveFilter: boolean\r\n}\r\n\r\nconst Controls = ({ filterType, sortType, isArchiveFilter, changeSortType, changeFilterType, changeIsArchiveFilter, history }: Props) => {\r\n  return (\r\n    <section className=\"controls\">\r\n      <div className=\"controls__sorting\">\r\n        <p className=\"controls__sorting__label\">Сортировать по:</p>\r\n        <Radio.Group onChange={(evt) => changeSortType(evt.target.value)} defaultValue={sortType}>\r\n          <Radio value={SortType.NAME}>Имени</Radio>\r\n          <Radio value={SortType.BIRTHDAY}>Дате рождения</Radio>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"controls__filters\">\r\n        <p>Фильтры: </p>\r\n        <Select className=\"role-filter\" defaultValue={filterType}\r\n                onChange={(evt) => changeFilterType(evt.valueOf().toString())}>\r\n          <Option value={FilterType.NONE}>Все</Option>\r\n          <Option value={FilterType.COOK}>Повар</Option>\r\n          <Option value={FilterType.WAITER}>Официант</Option>\r\n          <Option value={FilterType.DRIVER}>Водитель</Option>\r\n        </Select>\r\n        <label htmlFor=\"archiveFilter\">В архиве: </label>\r\n        <Checkbox type=\"checkbox\" id=\"archiveFilter\" defaultChecked={isArchiveFilter} onChange={\r\n          (evt) => changeIsArchiveFilter(evt.target.checked)\r\n        }/>\r\n      </div>\r\n      <Button className=\"add-new-btn\"\r\n              onClick={() => {\r\n                history.push(`${AppRoute.EMPLOYEE_PAGE}new`)\r\n                console.log('Выполнен переход на страницу создания новой карточки сотрудника')\r\n              }}>\r\n        Добавить нового сотрудника\r\n      </Button>\r\n    </section>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  filterType: getFilterType(state),\r\n  sortType: getSortType(state),\r\n  isArchiveFilter: getIsArchiveFilter(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  changeSortType(sortType: string) {\r\n    dispatch(ActionCreator.changeSortType(sortType))\r\n    console.log(`Выбрана сортировка по ${sortType}`)\r\n  },\r\n  changeFilterType(filterType: string) {\r\n    dispatch(ActionCreator.changeFilterType(filterType))\r\n    console.log(`Выбрана фильтрация по ${filterType}`)\r\n  },\r\n  changeIsArchiveFilter(isChecked: boolean) {\r\n    dispatch(ActionCreator.changeIsArchiveFilter(isChecked))\r\n    console.log(`Фильтрация \"в архиве\" изменена на ${isChecked}`)\r\n  },\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Controls))\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { EmployeeData, State } from \"../../types\";\r\nimport { AppRoute } from \"../../const\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Table } from 'antd';\r\nimport { getSortedEmployeesData } from \"../../reducer/selectors\";\r\n\r\ntype Props = {\r\n  employeesData: EmployeeData[]\r\n  history: any\r\n}\r\n\r\nconst EmployeesList = ({ employeesData, history }: Props) => {\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Имя',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    }, {\r\n      title: 'Должность',\r\n      dataIndex: 'role',\r\n      key: 'role',\r\n    }, {\r\n      title: 'Телефон',\r\n      dataIndex: 'phone',\r\n      key: 'phone',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <section className=\"employees-section\">\r\n      <Table columns={columns} dataSource={employeesData} style={{ cursor: 'pointer' }} tableLayout=\"fixed\"\r\n             rowKey={(record) => record.id} onRow={(record) => {\r\n        return {\r\n          onClick: () => {\r\n            history.push(`${AppRoute.EMPLOYEE_PAGE + record.id}`)\r\n          },\r\n        };\r\n      }}/>\r\n    </section>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  employeesData: getSortedEmployeesData(state),\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps)(EmployeesList))\r\n","import React from \"react\";\r\nimport Controls from \"../controls/controls\";\r\nimport EmployeesList from \"../employees-list/employees-list\";\r\nimport \"./main-page.scss\"\r\n\r\nconst MainPage = () => (\r\n  <>\r\n    <header>\r\n      <h1 className=\"app-header\">Employees App</h1>\r\n    </header>\r\n    <main>\r\n      <Controls/>\r\n      <EmployeesList/>\r\n    </main>\r\n  </>\r\n)\r\n\r\nexport default MainPage\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport MaskedInput from 'antd-mask-input'\r\nimport { Button, Checkbox, Input, Select } from 'antd';\r\nimport { EmployeeData, State } from \"../../types\";\r\nimport { AppRoute, FilterType } from \"../../const\";\r\nimport { ActionCreator } from \"../../reducer/reducer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./employee-page.scss\"\r\nimport { getEmployeesData } from \"../../reducer/selectors\";\r\nimport { SelectValue } from \"antd/es/select\";\r\nimport { CheckboxChangeEvent } from \"antd/es/checkbox\";\r\n\r\nconst { Option } = Select\r\n\r\ntype Props = {\r\n  employeeId: string\r\n  employeesData: EmployeeData[]\r\n  editEmployee: (data: EmployeeData) => void\r\n  addNewEmployee: (data: EmployeeData) => void\r\n  history: any\r\n}\r\n\r\nconst EmployeePage = ({ employeeId, addNewEmployee, employeesData, editEmployee, history }: Props) => {\r\n  const newEmployee: EmployeeData = {\r\n    id: employeesData[employeesData.length - 1].id + 1,\r\n    name: '',\r\n    phone: '',\r\n    birthday: '',\r\n    role: '',\r\n    isArchive: false,\r\n  }\r\n\r\n  const formSubmitHandler = (evt: any) => {\r\n    evt.preventDefault()\r\n\r\n    if (employeeId === 'new') {\r\n      addNewEmployee(employeeData)\r\n      console.log(`Сотрудник с id ${employeeId} успешно сохранен!`)\r\n    } else {\r\n      editEmployee(employeeData)\r\n      console.log(`Новый сотрудник успешно сохранен в базу! Ему присвоен id ${newEmployee.id}`)\r\n    }\r\n\r\n    history.push(AppRoute.MAIN)\r\n  }\r\n\r\n  let selectedEmployee = newEmployee\r\n  let employeeInBase: EmployeeData | null = newEmployee\r\n  if (employeeId !== 'new') {\r\n    employeeInBase = employeesData.find((data) => data.id === +employeeId) || null\r\n    selectedEmployee = employeeInBase || newEmployee\r\n  }\r\n\r\n  const [employeeData, setEmployeeData] = useState(selectedEmployee)\r\n\r\n  const EmployeeHandlers = {\r\n    nameChangeHandler(evt: React.ChangeEvent<HTMLInputElement>) {\r\n      setEmployeeData({\r\n        ...employeeData,\r\n        name: evt.target.value\r\n      })\r\n    },\r\n    phoneChangeHandler(evt: React.ChangeEvent<HTMLInputElement>) {\r\n      setEmployeeData({\r\n        ...employeeData,\r\n        phone: evt.target.value,\r\n      })\r\n    },\r\n    birthdayChangeHandler(evt: React.ChangeEvent<HTMLInputElement>) {\r\n      setEmployeeData({\r\n        ...employeeData,\r\n        birthday: evt.target.value,\r\n      })\r\n    },\r\n    roleChangeHandler(evt: SelectValue) {\r\n      setEmployeeData({\r\n        ...employeeData,\r\n        role: evt.valueOf().toString(),\r\n      })\r\n    },\r\n    isArchiveChangeHandler(evt: CheckboxChangeEvent) {\r\n      setEmployeeData({\r\n        ...employeeData,\r\n        isArchive: evt.target.checked\r\n      })\r\n    },\r\n  }\r\n\r\n  return employeeInBase ? (\r\n    <>\r\n      <header>\r\n        <h1 className=\"employee-card-header\">Карточка сотрудника</h1>\r\n      </header>\r\n      <section className=\"employee-page\">\r\n        <form className=\"employee-form\" onSubmit={formSubmitHandler}>\r\n          <div className=\"name-input-wrapper employee-form__wrapper\">\r\n            <label className=\"name-input-label\" htmlFor=\"employee-name-input\">Имя: </label>\r\n            <Input className=\"name-input\" type=\"text\" id=\"employee-name-input\" value={employeeData.name} required\r\n                   maxLength={30} placeholder=\"Введите имя сотрудника\" onChange={EmployeeHandlers.nameChangeHandler}/>\r\n          </div>\r\n          <div className=\"phone-input-wrapper employee-form__wrapper\">\r\n            <label className=\"phone-input-label\" htmlFor=\"employee-phone-input\">Телефон: </label>\r\n            <MaskedInput type=\"tel\" id=\"employee-phone-input\" value={employeeData.phone} required\r\n                         mask=\"+7 (111) 111-1111\" pattern=\"^\\+?\\d\\s(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$\"\r\n                         onChange={EmployeeHandlers.phoneChangeHandler}/>\r\n          </div>\r\n          <div className=\"birthday-input-wrapper employee-form__wrapper\">\r\n            <label htmlFor=\"employee-birthday-input\">Дата рождения: </label>\r\n            <MaskedInput type=\"text\" id=\"employee-birthday-input\" defaultValue={employeeData.birthday}\r\n                         mask=\"11.11.1111\" placeholder=\"ДД.ММ.ГГГГ\" pattern=\"\\d{2}\\.\\d{2}\\.\\d{4}\" required\r\n                         onChange={EmployeeHandlers.birthdayChangeHandler}/>\r\n          </div>\r\n          <div className=\"role-input-wrapper employee-form__wrapper\">\r\n            <label>Должность: </label>\r\n            <Select className=\"role-input\" defaultValue={employeeData.role}\r\n                    onChange={EmployeeHandlers.roleChangeHandler}>\r\n              <Option value={FilterType.COOK}>Повар</Option>\r\n              <Option value={FilterType.WAITER}>Официант</Option>\r\n              <Option value={FilterType.DRIVER}>Водитель</Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"archive-input-wrapper employee-form__wrapper\">\r\n            <label htmlFor=\"employee-archive-checkbox\">В архиве? </label>\r\n            <Checkbox id=\"employee-archive-checkbox\" checked={employeeData.isArchive}\r\n                      onChange={EmployeeHandlers.isArchiveChangeHandler}/>\r\n          </div>\r\n          <Button className=\"employee-form__submit-btn\" type=\"primary\" htmlType=\"submit\">Сохранить</Button>\r\n          <Button className=\"employee-form__back-btn\" type=\"primary\" danger\r\n                  onClick={() => history.push(AppRoute.MAIN)}>Вернуться назад без сохранения</Button>\r\n        </form>\r\n      </section>\r\n    </>\r\n  ) : (\r\n    <div>\r\n      {console.error('Выполнен переход на страницу несуществующего сотрудника (такого id нет в базе)')}\r\n      <h1>Ошибка! Такого сотрудника нет в базе.</h1>\r\n      <Link to={AppRoute.MAIN}>Вернуться на главную</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  employeesData: getEmployeesData(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  editEmployee(data: EmployeeData) {\r\n    dispatch(ActionCreator.editEmployee(data))\r\n  },\r\n  addNewEmployee(data: EmployeeData) {\r\n    dispatch(ActionCreator.addNewEmployee(data))\r\n  },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeePage)\r\n","import React from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom'\nimport { AppRoute } from '../../const'\nimport 'antd/dist/antd.css';\nimport MainPage from \"../main-page/main-page\";\nimport EmployeePage from \"../employee-page/employee-page\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path={AppRoute.MAIN} component={MainPage}/>\n        <Route exact path={`${AppRoute.EMPLOYEE_PAGE}:id`}\n               render={({ match, history }) => {\n                 console.log(`Выполнен переход на страницу редактирования сотрудника с id ${match.params.id}`)\n                 return <EmployeePage employeeId={match.params.id} history={history}/>\n               }}/>\n        <Route render={() => (\n          <React.Fragment>\n            {console.error('Выполнен переход на несуществующий маршрут')}\n            <h1>Ошибка: 404. Страница не найдена.</h1>\n            <Link to={AppRoute.MAIN}>Вернуться на главную</Link>\n          </React.Fragment>\n        )}\n        />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from 'react-redux';\nimport { ActionCreator, reducer } from './reducer/reducer';\nimport employeesData from './employees.json';\nimport './index.scss';\nimport App from './components/app/App';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n\nstore.dispatch(ActionCreator.loadEmployees(employeesData))\nconsole.log('Данные загружены в базу')\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nconsole.log('Приложение запущено')\n"],"sourceRoot":""}